#------------------------------
# Functions
#------------------------------

# Job management
# Slay: send to background and detach from term
slay() {
    "$*" >/dev/null 2>&1 & disown %1
}

# Archive extractor
extract() {
    local remove_archive
    local success
    local file_name
    local extract_dir

    if (( $# == 0 )); then
        echo "Usage: extract [-option] [file ...]"
        echo
        echo Options:
        echo " -r, --remove Remove archive."
        echo
        echo "Report bugs to <sorin.ionescu@gmail.com>."
    fi

    remove_archive=1
    if [[ "$1" == "-r" ]] || [[ "$1" == "--remove" ]]; then
        remove_archive=0
        shift
    fi

    while (( $# > 0 )); do
        if [[ ! -f "$1" ]]; then
            echo "extract: '$1' is not a valid file" 1>&2
            shift
            continue
        fi

        success=0
        file_name="$( basename "$1" )"
        extract_dir="$( echo "$file_name" | sed "s/\.${1##*.}//g" )"
        case "$1" in
            (*.tar.gz|*.tgz) tar xvzf "$1" ;;
            (*.tar.bz2|*.tbz|*.tbz2) tar xvjf "$1" ;;
            (*.tar.xz|*.txz) tar --xz --help &> /dev/null \
                && tar --xz -xvf "$1" \
                || xzcat "$1" | tar xvf - ;;
            (*.tar.zma|*.tlz) tar --lzma --help &> /dev/null \
                && tar --lzma -xvf "$1" \
                || lzcat "$1" | tar xvf - ;;
            (*.tar) tar xvf "$1" ;;
            (*.gz) gunzip "$1" ;;
            (*.bz2) bunzip2 "$1" ;;
            (*.xz) unxz "$1" ;;
            (*.lzma) unlzma "$1" ;;
            (*.Z) uncompress "$1" ;;
            (*.zip) unzip "$1" -d $extract_dir ;;
            (*.rar) unrar e -ad "$1" ;;
            (*.7z) 7za x "$1" ;;
            (*.deb)
                mkdir -p "$extract_dir/control"
                mkdir -p "$extract_dir/data"
                cd "$extract_dir"; ar vx "../${1}" > /dev/null
                cd control; tar xzvf ../control.tar.gz
                cd ../data; tar xzvf ../data.tar.gz
                cd ..; rm *.tar.gz debian-binary
                cd ..
                ;;
            (*)
                echo "extract: '$1' cannot be extracted" 1>&2
                success=1
                ;;
        esac

        (( success = $success > 0 ? $success : $? ))
        (( $success == 0 )) && (( $remove_archive == 0 )) && rm "$1"
        shift
    done
}

# print current git branch to stdout
current_branch() {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return
    echo ${ref#refs/heads/}
}

# Add a cloned repository as a submodule
submodule_add() {
    [[ -n $1 ]] || { echo "Usage: $0 SUBMODULE_DIR"; return 1; }
    git status >/dev/null 2>&1 || { echo 'Not a git repo. Exiting.'; return 1; }
    local git_url=$(cat $1/.git/config | grep -m1 url | awk '{ print $3 }')
    git submodule add "$git_url" "$1"
}


yadm_submodule_add() {
    [[ -n $1 ]] || { echo "Usage: $0 SUBMODULE_DIR"; return 1; }
    local git_url=$(cat $1/.git/config | grep -m1 url | awk '{ print $3 }')
    yadm submodule add "$git_url" "$1"
}

yadm-dumb-update() {
    yadm commit -am "Update config"
    yadm push
}

# Clone from my username
gcs() {
    local repo="$1"
    shift
    git clone "https://github.com/$USER/$repo" "$@"
}

# Git push wrapper with post-push support
# Source: http://stackoverflow.com/a/3812238
gp() {
    local post_push="$(git rev-parse --git-dir)/hooks/post-push"
    git push "$@" && {
        [[ -x "$post_push" ]] && "$post_push" "$(current_branch)" "$@"
    }
}
compdef _git gp=git-push

wgh() {
    local url=$(xsel -b)
    url=$(sed -e 's/\(github.com\)/raw.\1/' -e 's|blob/||' <<< $url)
    wget $url
}

# Pastie
sprunge() {
    $@ | curl -F 'sprunge=<-' http://sprunge.us
}

# File uploads
transfer() {
    if [ $# -eq 0 ]
    then
        echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md"
        return 1
    fi
    tmpfile=$(mktemp -t transferXXX)
    if tty -s
    then basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g')
        curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> "$tmpfile"
    else
        curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> "$tmpfile"
    fi
    cat "$tmpfile"
    rm -f "$tmpfile"
}

# Get journal entries for a particular service
jfs() {
    sudo journalctl --reverse _SYSTEMD_UNIT="${1}.service"
}

jfx() {
    sudo journalctl -xfl _SYSTEMD_UNIT="$1.service"
}

prepend() {
    sed -i "1i $1" "$2"
}

# output a specific line of a file
# $1: line number ; $2: file
line () {
    sed -n "${1}p" "$2"
}

mkcd() {
    mkdir -p "$@" && cd "$@"
}

psg() {
    ps aux | grep "$1" | grep -v "grep"
}

# Calcultor
c() {
    # echo "scale=3; $@" | bc
    bc -l <<< $@
}
alias c="noglob c" # do not glob (expand) wildcards, like: c 12*3

rationalise-dot() {
    if [[ $LBUFFER = *.. ]]; then
        LBUFFER+=/..
    else
        LBUFFER+=.
            fi
}
zle -N rationalise-dot
bindkey . rationalise-dot

#######################
# sleeptil: Sleep until

# Usage: sleeptil [-v] <date/time string>
# Option:
# -v: display date/time and seconds until the time
# Optional:
# td.sh: for printing out human readable time
# https://github.com/livibetter/td.sh
# ref: http://blog.yjl.im/2012/11/sleeptil-sleep-until-bash-function.html

sleeptil () {
    local verbose END_TS END_DATE DUR

    if [[ $1 == -v ]]; then
        verbose=1
        shift
    fi

    # Checking valid of date/time string
    if ! END_TS=$(date -d "$*" +%s); then
        return 1
    fi

    # This is not a sci-fi, you cannot sleep back into the past.
    if (( END_TS < $(date +%s ))); then
        echo "$(date -d "$*") is in the past!" >&2
        return 1
    fi

    if [[ ! -z $verbose ]]; then
        END_DATE="$(date -d @$END_TS)"
        if type td.sh &>/dev/null; then
            DUR="$(td.sh $((END_TS - $(date +%s))))"
        else
            DUR="$((END_TS - $(date +%s))) seconds"
        fi
        echo "$END_DATE in $DUR"
    fi

    sleep $((END_TS - $(date +%s)))
}

countdown() {
    local abort
    [[ "$1" -gt 0 ]] || return
    for (( i=$1; i > 0; i-- ))
    do
        read -k 1 -t 1 -s abort
        #[[ -z $abort ]] || return
        if [[ -n $abort ]]; then
            [[ $(wc -l <<< $abort) -gt 1 ]] && break || return
        fi
        echo -n "$i "
    done
    echo
}

sdwn() {
    echo -n "halting in ... "
    countdown 3 && sudo shutdown -h now
    # systemctl poweroff
}

rbt() {
    echo -n "rebooting in ... "
    countdown 3 && sudo reboot
    # systemctl reboot
}

# file/dir backup and restore
# -s: Copy instead of moving file
bak() {
    # TODO There may be a file called "-s"
    # TOOD Refactoring / split / use smart case statement ?
    [[ "$1" == "-s" ]] && cmd="cp -a" || cmd="mv"
    [[ $# -eq 2 ]] && shift
    if [[ "$1" =~ .*\.bak ]]; then
        eval $cmd -i "$1" "${1:r}"
    else
        local file="$1"
        if [[ ! -e "$file" ]]; then
            # if file does not exit try .bak instead
            [[ -e "${file}.bak" ]] && file="${file}.bak" || { echo "No such file or dir: $file"; return 1; }
        fi
        if [[ "$file" =~ .*\.bak ]]; then
            eval $cmd -i "$file" "${file:r}"
        else
            eval $cmd -i "$file{,.bak}"
        fi
    fi
}

# swap 2 filenames around
swp() {
    if [ $# -ne 2 ]; then
        echo "swap: 2 arguments needed"; return 1
    fi
    if [ ! -e "$1" ]; then
        echo "swap: $1 does not exist"; return 1
    fi
    if [ ! -e "$2" ]; then
        echo "swap: $2 does not exist"; return 1
    fi
    local TMPFILE=tmp.$$
    mv "$1" "$TMPFILE"
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

stop_alarm () {
    local pidfile=/tmp/alarm.pid
    local remote_user=pschmitt
    local remote_host=LaXLinux
    local stop_cmd="mpc pause && [[ -r $pidfile ]] && kill -9 \"\$(cat $pidfile)\" && rm -rf $pidfile"
    if [[ "$(hostname)" != "LaXLinux" ]]; then
        ssh $remote_user@$remote_host "$stop_cmd" 2&> /dev/null
    else
        eval "$stop_cmd" 2&> /dev/null

    fi
}

# Echo as root
secho() {
    [[ $# -lt 2 ]] && { echo "Usage: secho [-en] string file" 1>&2; return 1; }
    if [[ "$1" == "-e" || "$1" == "-n" || "$1" == "-en" || "$1" == "-ne" ]]; then
        local params="$1"
        shift 1
    fi
    sudo su -c "echo $params \"$1\" >> \"$2\""
}

# Clean makepkg devel directory
mkpgcl() {
    unsetopt nomatch
    rm -rf pkg/ src/ $(basename $PWD)-*.{pkg.tar.xz,src.tar.gz}
    setopt nomatch
}

# Generate 4096 SSL key
genssl() {
    sudo openssl genrsa -out "${1}.key" 4096
    sudo chmod 600 "${1}.key"
    sudo openssl req -new -key "${1}.key" -out "${1}.csr" # -conf /tmp/nginx/ca.conf
    # sudo openssl req -new -key "${1}.key" -out "${1}.csr" -subj "C=FR ST=Lorraine O=lxl.io localityName=Metz commonName=lxl.io organizationalUnitName=lxl.io emailAddress=webmaster@lxl.io"
    sudo openssl x509 -req -days 365 -in "${1}.csr" -signkey "${1}.key" -out "${1}.crt"
}

become() {
    local user="$1"
    local shell="$2"
    [[ -z "$user" ]] && { echo "Usage: $0 USER [SHELL]"; return 2; }
    [[ -z "$shell" ]] && {
        if [[ -n "$SHELL" ]] && shell=$SHELL
        then
            command -v bash > /dev/null && shell="bash" || shell="sh"
        fi
    }
    sudo -u "$user" -s "$shell"
}

# Create new virtualenv named after the basename of the current directory
mkvc() {
    local cur_dir="$(basename $PWD)"
    local python_env=${1:-/usr/bin/python} requirements
    [[ -r "requirements.txt" ]] && requirements="-r requirements.txt"
    eval mkvirtualenv $requirements --python=$python_env \"$cur_dir\"
    # Auto env
    if [[ ! -f .autoenv.zsh ]]
    then
        echo "workon $cur_dir" > .autoenv.zsh
    else
        if ! grep -q "workon $cur_dir" .autoenv.zsh
        then
            echo "workon $cur_dir" >> .autoenv.zsh
        fi
    fi
}

rmvc() {
    local venv="$PWD"
    [[ -n "$VIRTUAL_ENV" ]] && { venv="$VIRTUAL_ENV"; deactivate; }
    local venv_name="$(basename $venv)"
    rmvirtualenv "$venv_name"
    [[ -w .autoenv.zsh ]] && sed -i "/workon $venv_name)/d" .autoenv.zsh
}

ssh-rm-key() {
    [[ "$1" =~ ^[0-9]+$ ]] || { echo "Input is not a number" >&2; return 3;}
    sed -i "${1}d" ~/.ssh/known_hosts
}

wait-online() {
    [[ "$1" ]] || { echo "Usage: $0 DEST"; return 2; }
    while ! ping -c 1 -W 1 "$1" > /dev/null 2>&1
    do
        sleep 1
    done
}

# Notify when internet connection is up
online_notify() {
    [[ -n "$1" ]] && DEST=$1 || DEST=comreset.io
    wait-online "$DEST" && notify-send -a "$0" -u critical "$DEST is online!"
}

ssh-wait() {
    [[ "$1" ]] || { echo "Usage: $0 DEST"; return 2; }
    local user host
    local dest="${@:$#}"
    if [[ "$dest" =~ .*@.* ]]
    then
        read user host <<< $(echo "$dest" | sed -e 's/@/ /g')
    else
        host="$dest"
    fi
    echo "Wait for $host"
    echo "ssh $@"
}

nameserver() {
    [[ "$#" == 0 ]] && { cat /etc/resolv.conf; return; }
    [[ "$1" == "-h" ]] && { echo "Usage: $0 NAMESERVER [NAMESERVER]..."; return 2; }
    local n
    echo '# Managed by nameserver()' | sudo tee /etc/resolv.conf > /dev/null
    for n in "$@"
    do
        echo "nameserver $n" | sudo tee -a /etc/resolv.conf > /dev/null
    done
    cat /etc/resolv.conf
}

usshpass() {
    local password="$1"
    shift
    sshpass -p "$password" ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no "$@"
}

sslcert() {
    echo | openssl s_client -showcerts -servername gnupg.org -connect "$1:443" 2>/dev/null | openssl x509 -inform pem -noout -text
}

wport() {
    # Get the PID and process name of the process listening on a given TCP port
    local pid=$(sudo fuser "${1}/tcp" 2>&1 | awk '{print $NF}')
    # No PID -> No output
    if [[ -z "$pid" ]]
    then
        return
    fi
    local pname=$(ps -p "$pid" -o comm=) # to get full path use -o command
    echo "$pname (PID: $pid)"
}

ppid() {
    ss -lpn | awk '/'"${1}"'/ { print gensub(/.*pid=(.+),.*/, "\\1", "g"); exit }'
}

# vim: set ft=sh et ts=4 sw=4 :
